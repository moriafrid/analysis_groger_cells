from neuron import h, gui
import numpy as np
import sys
from glob import glob
if len(sys.argv) != 2:
    cell_name="2017_07_06_C_4-3"
    before_after="_before_shrink"
else:
    cell_name=sys.argv[1]
    # before_after=sys.argv[2]
    before_after="_after_shrink"
folder_="cells_initial_information/"

h.load_file("import3d.hoc")
h.load_file("nrngui.hoc")
h.load_file('stdlib.hoc')
h.load_file("stdgui.hoc")
class Cell: pass
def mkcell(fname):
    #def to read ACS file
  loader = h.Import3d_GUI(None)
  loader.box.unmap()
  loader.readfile(fname)
  c = Cell()
  loader.instantiate(c)
  return c
def instantiate_swc(filename):
    h.load_file('import3d.hoc')
    h('objref cell, tobj')
    h.load_file('allen_model.hoc')
    h.execute('cell = new allen_model()')
    h.load_file(filename)
    nl = h.Import3d_SWC_read()
    nl.quiet = 1
    nl.input(filename)
    i3d = h.Import3d_GUI(nl, 0)
    i3d.instantiate(h.cell)
    return h.cell

# cell=instantiate_swc(folder_+cell_name+'/morphology_z_correct.swc')
# print (cell)
# sp = h.PlotShape()
# sp.show(0)  # show diameters
# a=1
pass
max_dz = 40
def run(id, prev_id,sec,type, parent_point=np.array([0, 0, 0]), print_=True):
    global morphology_dict,sec_num
    sec_points = np.array([list(i) for i in sec.psection()['morphology']['pts3d']])[:,:3]
    sec_diams = np.array([list(i) for i in sec.psection()['morphology']['pts3d']])[:,3]
    if print_:
        print(sec.name(), len(sec.children()))
    acc_z_diff = 0
    for i in range(1, len(sec_points)):
        sec_points[i][2] -= acc_z_diff
        if abs(sec_points[i][2]-sec_points[i-1][2])>max_dz:
            if sec_points[i][2]-sec_points[i-1][2]>0:
                acc_z_diff+=sec_points[i][2]-sec_points[i-1][2]-max_dz
                sec_points[i][2] -= sec_points[i][2]-sec_points[i-1][2]-max_dz
            else:
                acc_z_diff+=sec_points[i][2]-sec_points[i-1][2]+max_dz
                sec_points[i][2]-= sec_points[i][2]-sec_points[i-1][2]+max_dz

    sec_points -= sec_points[0] - parent_point
    x,y,z,diam=[],[],[],[]
    for i, point in enumerate(sec_points):
        swc_file.write(str(id)+' '+str(type)+' '+
                       ' '.join(point[:3].round(4).astype(str).tolist()) +
                       ' ' + str(round(sec_diams[i]/ 2.0, 4))+' '+str(prev_id)+'\n')
        x.append(point[0].round(4))
        y.append(point[1].round(4))
        z.append(point[2].round(4))
        diam.append(round(sec_diams[i],4))
        prev_id=id
        id+=1
    sec_num+=1
    morphology_dict[sec_num]={'sec name':sec.name().split('.')[-1],'x':x,'y':y,'z':z,'d':diam}

    for child in sec.children():
        id=run(id,prev_id,child, type, parent_point = sec_points[-1] ,print_=print_)
    return id

######################################################
# build the model
######################################################

if "after" in before_after:
    fname = glob(folder_+cell_name+'/*shrinkXYZ.ASC')[0]
elif "before" in before_after:
    fname = glob(folder_+cell_name+'/*.ASC')[0]
    if "shrinkXYZ" in fname:
        fname = glob(folder_+cell_name+'/*.ASC')[1]


# if 'shrinkXYZ' in fname:
#     fname = glob(folder_+cell_name+'/*.ASC')[1]

morphology_dict={}
cell=mkcell(fname)
sp2 = h.PlotShape()
sp2.color_all(3)
sp2.show(0)  # show diameters
soma_points = np.array([list(i) for i in cell.soma[0].psection()['morphology']['pts3d']]).mean(axis=0)
x,y,z,d=[],[],[],[]
for xyz in cell.soma[0].psection()['morphology']['pts3d']:
    x.append(xyz[0])
    y.append(xyz[1])
    z.append(xyz[2])
    d.append(xyz[3])

swc_file = open(folder_+cell_name+'/morphology_z_correct.swc', 'w')
swc_file.write('# generated by Vaa3D Plugin sort_neuron_swc\n')
swc_file.write('# source file(s): '+fname+'\n')
swc_file.write('# id,type,x,y,z,r,pid\n')
swc_file.write('1 1 '+
               ' '.join(soma_points[:3].round(4).astype(str).tolist())+
               ' '+str(round(cell.soma[0].diam/2.0, 4))+' -1\n')
sec_num=0
# morphology_dict[sec_num]={'sec name':cell.soma[0].name().split('.')[-1],'x':soma_points[0].round(4),'y':soma_points[1].round(4),'z':soma_points[2].round(4),'d':cell.soma[0].diam}
morphology_dict[sec_num]={'sec name':cell.soma[0].name().split('.')[-1],'x':x,'y':y,'z':z,'d':d}
# with open(folder_+cell_name+"/soma_dict.p", 'wb') as handle:
#     pickle.dump(morphology_dict, handle, protocol=pickle.HIGHEST_PROTOCOL)
def get_closest_z(soma_point, sec_point, soma_r):
    # dists = [[np.linalg.norm(point[:3]- sec_point[:3]), point[:3]] for point in soma_points]
    # dists.sort()
    # factor = soma_r/dists[0][0]
    vec = (-soma_point + sec_point[:3])
    vec/=np.linalg.norm(vec)
    return soma_point + vec * soma_r

id=2
try:cell.axon
except: cell.axon=[]
try:cell.apic
except: cell.apic=[]
for child in cell.soma[0].children():
    type=None
    if child in cell.dend:
        type=3
    elif child in cell.axon:
        type=2
    elif child in cell.apic:
        type=4

    if "2017_03_04_A_6-7" in cell_name:
        if "before" in before_after:
            if child==cell.dend[56]:
                type=2
            elif child==cell.axon[0]:
                type=3
        # else:
        #     if child==cell.dend[56]:
        #         type=2
        #     elif child==cell.axon[0]:
        #         type=3
    if type is None:
        raise Exception('no type chosen')
    parent_point = get_closest_z(soma_points[:3],
                                 np.array(child.psection()['morphology']['pts3d'][0])[:3],
                                 soma_r = round(cell.soma[0].diam/2.0, 4))
    id=run(id,1,child,type, print_=type==2, parent_point=parent_point)

swc_file.close()
# with open(folder_+cell_name+"/morphology_dict_shrink_ASC.p", 'wb') as handle:
#     pickle.dump(morphology_dict, handle, protocol=pickle.HIGHEST_PROTOCOL)

# cell=None
#
# cell=instantiate_swc(folder_+cell_name+'/morphology_z_correct.swc')
# print (cell)
# sp = h.PlotShape()
# sp.show(0)  # show diameters
import os
os.system('python creat_morphology_dict.py '+cell_name+" "+before_after)






